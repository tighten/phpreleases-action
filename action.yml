name: 'PHP Releases'
branding:
  icon: 'plus'
  color: 'yellow'
description: 'Generates an array of the latest, minimum security, and minimum active PHP releases, along with user defined versions'
inputs:
  releases:
    required: false
    description: 'Add specific versions to the matrix array'
outputs:
  range:
    description: "Releases Array"
    value: ${{ env.releases-array }}
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3

    - name: Fetch Cache
      id: fetch-cache
      uses: actions/cache@v3
      with:
        path: .temp
        key: temp

    - name: Store user input
      id: store-user-input
      shell: bash
      run: |
        echo "user-input=${{ inputs.releases }}" >> $GITHUB_ENV

    - name: Make Latest Request
      id: make-latest-request
      uses: fjogeleit/http-request-action@v1
      if: steps.fetch-cache.outputs.cache-hit != 'true'
      with:
        url: 'https://phpreleases.com/api/releases/latest'
        method: 'GET'

    - name: Make Security Request
      id: make-security-request
      uses: fjogeleit/http-request-action@v1
      if: steps.fetch-cache.outputs.cache-hit != 'true'
      with:
        url: 'https://phpreleases.com/api/releases/minimum-supported/security'
        method: 'GET'

    - name: Make Active Request
      id: make-active-request
      uses: fjogeleit/http-request-action@v1
      if: steps.fetch-cache.outputs.cache-hit != 'true'
      with:
        url: 'https://phpreleases.com/api/releases/minimum-supported/active'
        method: 'GET'

    - name: Parse Latest
      id: parse-latest
      if: steps.fetch-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        latest=${{ steps.make-latest-request.outputs.response }}
        IFS='.'
        read -ra arr <<< "$latest"
        echo "latest-release=$(echo ${arr[0]}.${arr[1]})" >> $GITHUB_ENV

    - name: Parse Minimum Supported
      id: parse-min
      if: steps.fetch-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "min-active-release=${{ fromJSON(steps.make-active-request.outputs.response).provided.major }}.${{ fromJSON(steps.make-active-request.outputs.response).provided.minor }}" >> $GITHUB_ENV
        echo "min-security-release=${{ fromJSON(steps.make-security-request.outputs.response).provided.major }}.${{ fromJSON(steps.make-security-request.outputs.response).provided.minor }}" >> $GITHUB_ENV

    - name: Return Response
      id: return-response
      run: |
        if [ "${{ steps.fetch-cache.outputs.cache-hit }}" != 'true' ]; then
          echo "Data fetched from Api"
          latest="${{ env.latest-release }}"
          minAct="${{ env.min-active-release }}"
          minSec="${{ env.min-security-release }}"
        else 
          echo "Data fetched from cache"
          latest=$(cat .temp/latest.txt)
          minAct=$(cat .temp/min-active.txt)
          minSec=$(cat .temp/min-security.txt)
        fi

        if [ -z "${{ env.user-input }}" ]; then
          echo "releases-array=$(echo [${latest}, ${minAct}, ${minSec}])" >> $GITHUB_ENV
        else
          userInput="${{ env.user-input }}"
          IFS=', ' read -r -a array <<< "$userInput"
          array+=(${latest} ${minAct} ${minSec})
          deduped=($(echo "${array[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

          printf -v formatted ',%s' "${deduped[@]}"
          formatted=${formatted:1}

          echo "releases-array=$(echo [${formatted}])" >> $GITHUB_ENV
        fi
      shell: bash
